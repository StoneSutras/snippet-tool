package org.stonesutras.snippettool.gui;

import net.java.dev.colorchooser.ColorChooser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.stonesutras.snippettool.controller._controller_AutoGuided;
import org.stonesutras.snippettool.controller._controller_ManualSelective;
import org.stonesutras.snippettool.controller._controller_ManualSequential;
import org.stonesutras.snippettool.model.SnippetTool;
import org.stonesutras.snippettool.util.PrefUtil;
import org.stonesutras.snippettool.util.SpringUtilities;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.prefs.Preferences;

/**
 * Snippet-Tool options component. Used to adjust marking-related preferences.
 * Prefencies are stored in snippet-tool.properties on 'exit' and are loaded
 * from snippet-tool.properties on startup.
 *
 * @author Alexei Bratuhin
 */
@SuppressWarnings("serial")
public class _panel_Options extends JPanel implements ActionListener,
    ItemListener, ChangeListener {

  /**
   * Size of input field for snippet marking related values
   **/
  public final static int SIZE_FIELD_LENGTH = 4;
  private static final Logger logger = LoggerFactory
      .getLogger(_panel_Options.class);
  /**
   * X Offset from right/left upper corner of the image, depending on text
   * direction
   **/
  public JTextField jtf_oa = new JTextField(SIZE_FIELD_LENGTH);
  /**
   * Y Offset from right/left upper corner of the image, depending on text
   * direction
   **/
  public JTextField jtf_ob = new JTextField(SIZE_FIELD_LENGTH);
  /**
   * Snippet width
   **/
  public JTextField jtf_a = new JTextField(SIZE_FIELD_LENGTH);
  /**
   * Snippet height
   **/
  public JTextField jtf_b = new JTextField(SIZE_FIELD_LENGTH);
  /**
   * X distance between snippets
   **/
  public JTextField jtf_da = new JTextField(SIZE_FIELD_LENGTH);
  /**
   * Y distance between snippets
   **/
  public JTextField jtf_db = new JTextField(SIZE_FIELD_LENGTH);
  /**
   * Rubbing color chooser
   **/
  public HiWi_GUI_colourchooser cc_rubb;
  /**
   * Text color chooser
   **/
  public HiWi_GUI_colourchooser cc_text;
  /**
   * Inactive marking snippet color chooser
   **/
  public HiWi_GUI_colourchooser cc_back;
  /**
   * Active marking snippet colorchooser
   **/
  public HiWi_GUI_colourchooser cc_fore;
  /**
   * Button group used for indicating text direction
   **/
  public ButtonGroup bg_direction = new ButtonGroup();
  public JRadioButton rb_left_to_right = new JRadioButton("left->right");
  public JRadioButton rb_right_to_left = new JRadioButton("right->left");
  /**
   * Button group used for selecting the text displayed on the marking
   **/
  public ButtonGroup bg_textout = new ButtonGroup();
  public JRadioButton rb_id = new JRadioButton("char");
  public JRadioButton rb_n = new JRadioButton("number");
  public JRadioButton rb_rc = new JRadioButton("(row,column)");
  /**
   * Button group for selecting mouse controller, appropriate for the task
   **/
  public ButtonGroup bg_markup = new ButtonGroup();
  public JRadioButton rb_auto = new JRadioButton("guided");
  public JRadioButton rb_man1 = new JRadioButton("manually, continious");
  public JRadioButton rb_man2 = new JRadioButton("manually, selective");
  /**
   * Reference to parent component
   **/
  _frame_SnippetTool root;
  SnippetTool snippettool;
  Preferences preferences;
  JLabel label_oa = new JLabel("x offset:");
  JLabel label_ob = new JLabel("y offset:");
  JLabel label_a = new JLabel("width:");
  JLabel label_b = new JLabel("height:");
  JLabel label_da = new JLabel("x distance:");
  JLabel label_db = new JLabel("y distance:");
  /**
   * Add autogenerated marking to image. Notice: all 6 fields must be filles
   * with proper values
   **/
  JButton b_addtext = new JButton("Add Text to Image");
  /**
   * Add autogenerated marking for missing (in the database for current
   * inscript) characters to image. Notice: all 6 fields must be filles with
   * proper values
   **/
  JButton b_addtext2 = new JButton("Add Missing Text to Image");

  public _panel_Options(_frame_SnippetTool r, SnippetTool snippettool) {
    super();

    this.root = r;
    this.snippettool = snippettool;
    this.preferences = root.preferences;

    setLayout(new SpringLayout());
    setBorder(new TitledBorder("options"));
    // setPreferredSize(new Dimension(100, 600));

    cc_rubb = new HiWi_GUI_colourchooser(PrefUtil.String2Color(preferences
        .get("local.color.rubbing", "ffffff")),
        preferences.getFloat("local.alpha.rubbing", 1.0f),
        this, this);
    cc_text = new HiWi_GUI_colourchooser(PrefUtil.String2Color(preferences
        .get("local.color.text", "ffffff")),
        preferences.getFloat("local.alpha.text", 1.0f), this, this);
    cc_back = new HiWi_GUI_colourchooser(PrefUtil.String2Color(preferences
        .get("local.color.marking.p", "ffffff")),
        preferences.getFloat("local.alpha.marking.p", 1.0f),
        this, this);
    cc_fore = new HiWi_GUI_colourchooser(PrefUtil.String2Color(preferences
        .get("local.color.marking.a", "ffffff")),
        preferences.getFloat("local.alpha.marking.a", 1.0f),
        this, this);

    JPanel box1 = new JPanel(new SpringLayout());
    box1.setBorder(new TitledBorder("default markup values"));
    box1.add(label_oa);
    box1.add(jtf_oa);
    box1.add(label_ob);
    box1.add(jtf_ob);
    box1.add(label_a);
    box1.add(jtf_a);
    box1.add(label_b);
    box1.add(jtf_b);
    box1.add(label_da);
    box1.add(jtf_da);
    box1.add(label_db);
    box1.add(jtf_db);
    SpringUtilities.makeCompactGrid(box1, 3, 4, 3, 3, 3, 3);

    JPanel box2 = new JPanel(new SpringLayout());
    box2.add(b_addtext);
    box2.add(b_addtext2);
    b_addtext.addActionListener(this);
    b_addtext2.addActionListener(this);
    SpringUtilities.makeCompactGrid(box2, 2, 1, 3, 3, 3, 3);

    cc_rubb.setBorder(new TitledBorder("rubbing"));
    cc_text.setBorder(new TitledBorder("text"));
    cc_back.setBorder(new TitledBorder("markup back"));
    cc_fore.setBorder(new TitledBorder("markup fore"));

    JPanel box3 = new JPanel(new SpringLayout());
    box3.setBorder(new TitledBorder("colour & alpha"));
    box3.add(cc_rubb);
    box3.add(cc_text);
    box3.add(cc_back);
    box3.add(cc_fore);
    SpringUtilities.makeCompactGrid(box3, 2, 2, 3, 3, 3, 3);

    JPanel box4 = new JPanel(new SpringLayout());
    box4.setBorder(new TitledBorder("text direction"));
    box4.add(rb_left_to_right);
    bg_direction.add(rb_left_to_right);
    box4.add(rb_right_to_left);
    bg_direction.add(rb_right_to_left);

    rb_left_to_right.addItemListener(this);
    rb_right_to_left.addItemListener(this);

    SpringUtilities.makeCompactGrid(box4, 2, 1, 3, 3, 3, 3);

    JPanel box5 = new JPanel(new SpringLayout());
    box5.setBorder(new TitledBorder("output"));
    box5.add(rb_id);
    bg_textout.add(rb_id);
    box5.add(rb_n);
    bg_textout.add(rb_n);
    box5.add(rb_rc);
    bg_textout.add(rb_rc);

    rb_id.addItemListener(this);
    rb_n.addItemListener(this);
    rb_rc.addItemListener(this);

    SpringUtilities.makeCompactGrid(box5, 3, 1, 3, 3, 3, 3);

    JPanel box6 = new JPanel(new SpringLayout());
    box6.add(box4);
    box6.add(box5);

    SpringUtilities.makeCompactGrid(box6, 1, 2, 3, 3, 3, 3);

    JPanel box7 = new JPanel(new SpringLayout());
    box7.setBorder(new TitledBorder("markup"));
    box7.add(rb_auto);
    box7.add(rb_man1);
    box7.add(rb_man2);
    bg_markup.add(rb_auto);
    bg_markup.add(rb_man1);
    bg_markup.add(rb_man2);
    rb_auto.addItemListener(this);
    rb_man1.addItemListener(this);
    rb_man2.addItemListener(this);
    rb_auto.setSelected(true);
    SpringUtilities.makeCompactGrid(box7, 3, 1, 3, 3, 3, 3);

    add(box1);
    add(box2);
    add(box3);
    add(box6);
    add(box7);

    SpringUtilities.makeCompactGrid(this, 5, 1, 0, 0, 0, 0);

    rb_right_to_left.setSelected(true);
    rb_id.setSelected(true);

    setVisible(true);
  }

  @Override
  public void itemStateChanged(ItemEvent ie) {
    if (rb_left_to_right.isSelected())
      snippettool.inscript.setLeftToRight(true);
    if (rb_right_to_left.isSelected())
      snippettool.inscript.setLeftToRight(false);

    if (rb_id.isSelected())
      snippettool.inscript.setCharacterVisible(true);
    else
      snippettool.inscript.setCharacterVisible(false);
    if (rb_n.isSelected())
      snippettool.inscript.setNumberVisible(true);
    else
      snippettool.inscript.setNumberVisible(false);
    if (rb_rc.isSelected())
      snippettool.inscript.setRowColumnVisible(true);
    else
      snippettool.inscript.setRowColumnVisible(false);

    if (rb_auto.isSelected()) {
      /** 'Main' mouse controller. Implements drag-n-resize functionality. **/
      _controller_AutoGuided mouse1 = new _controller_AutoGuided(
          root.main.main_image);

      root.main.main_image.imageCanvas.setMouseListener(mouse1);
      root.main.main_image.imageCanvas.setMouseMotionListener(mouse1);
    }
    if (rb_man1.isSelected()) {
      /**
       * 'Complementary' mouse controller. Implements continuous manual
       * marking.
       **/
      _controller_ManualSequential mouse2 = new _controller_ManualSequential(
          root.main.main_image);

      root.main.main_image.imageCanvas.setMouseListener(mouse2);
      root.main.main_image.imageCanvas.setMouseMotionListener(mouse2);
    }
    if (rb_man2.isSelected()) {
      /**
       * 'Complementary' mouse controller. Implements selective manual
       * marking.
       **/
      _controller_ManualSelective mouse3 = new _controller_ManualSelective(
          root.main.main_image);
      root.main.main_image.imageCanvas.setMouseListener(mouse3);
      root.main.main_image.imageCanvas.setMouseMotionListener(mouse3);
    }

    logger.trace("Triggering repaint.");
    root.main.repaint();
  }

  @Override
  public void actionPerformed(ActionEvent e) {
    //
    String cmd = e.getActionCommand();

    // set changed properties
    preferences.put("local.color.rubbing", PrefUtil
        .Color2String(cc_rubb.cc.getColor()));
    preferences.put("local.color.text", PrefUtil
        .Color2String(cc_text.cc.getColor()));
    preferences.put("local.color.marking.p", PrefUtil
        .Color2String(cc_back.cc.getColor()));
    preferences.put("local.color.marking.a", PrefUtil
        .Color2String(cc_fore.cc.getColor()));

    //
    if (cmd.equals(b_addtext.getActionCommand())) {
      snippettool.inscript.loadMarkingSchema(this, false);
      logger.trace("Triggering repaint.");
      root.repaint();
    }
    if (cmd.equals(b_addtext2.getActionCommand())) {
      snippettool.inscript.loadMarkingSchema(this, true);
      logger.trace("Triggering repaint.");
      root.repaint();
    }

    // repaint
    logger.trace("Triggering repaint.");
    root.main.repaint();
  }

  @Override
  public void stateChanged(ChangeEvent e) {
    // handle jslider
    if (e.getSource().equals(cc_rubb.as)) {
      float value = (float) (cc_rubb.as.getValue() / 100.0);
      preferences.putFloat("local.alpha.rubbing", value);
      cc_rubb.as2.setValue((int) (value * 100));
    }
    if (e.getSource().equals(cc_text.as)) {
      float value = (float) (cc_text.as.getValue() / 100.0);
      preferences.putFloat("local.alpha.text", value);
      cc_text.as2.setValue((int) (value * 100));
    }
    if (e.getSource().equals(cc_back.as)) {
      float value = (float) (cc_back.as.getValue() / 100.0);
      preferences.putFloat("local.alpha.marking.p", value);
      cc_back.as2.setValue((int) (value * 100));
    }
    if (e.getSource().equals(cc_fore.as)) {
      float value = (float) (cc_fore.as.getValue() / 100.0);
      preferences.putFloat("local.alpha.marking.a", value);
      cc_fore.as2.setValue((int) (value * 100));
    }
    // handle jspinner
    if (e.getSource().equals(cc_rubb.as2)) {
      float value = (float) ((Integer) (cc_rubb.as2.getValue()) / 100.0);
      preferences.putFloat("local.alpha.rubbing", value);
      cc_rubb.as.setValue((int) (value * 100));
    }
    if (e.getSource().equals(cc_text.as2)) {
      float value = (float) ((Integer) (cc_text.as2.getValue()) / 100.0);
      preferences.putFloat("local.alpha.text", value);
      cc_text.as.setValue((int) (value * 100));
    }
    if (e.getSource().equals(cc_back.as2)) {
      float value = (float) ((Integer) (cc_back.as2.getValue()) / 100.0);
      preferences.putFloat("local.alpha.marking.p", value);
      cc_back.as.setValue((int) (value * 100));
    }
    if (e.getSource().equals(cc_fore.as2)) {
      float value = (float) ((Integer) (cc_fore.as2.getValue()) / 100.0);
      preferences.putFloat("local.alpha.marking.a", value);
      cc_fore.as.setValue((int) (value * 100));
    }
    // repaint
    logger.trace("Triggering repaint.");
    root.main.repaint();
  }

  /**
   * Extending third-party ColorChooser with Opacity regulators
   *
   * @author Alexei Bratuhin
   */
  public class HiWi_GUI_colourchooser extends JPanel {
    ColorChooser cc;
    JSlider as;
    JSpinner as2;

    public HiWi_GUI_colourchooser(Color def, double a, ActionListener al,
                                  ChangeListener cl) {
      super();
      setLayout(new SpringLayout());
      setVisible(true);
      cc = new ColorChooser();
      cc.setColor(def);
      cc.addActionListener(al);
      as = new JSlider(JSlider.VERTICAL, 0, 100, (int) (a * 100));
      as.addChangeListener(cl);
      as2 = new JSpinner(new SpinnerNumberModel((int) (a * 100), 0, 100,
          1));
      as2.setEditor(new JSpinner.NumberEditor(as2));
      as2.addChangeListener(cl);
      add(cc);
      add(as);
      add(as2);
      SpringUtilities.makeCompactGrid(this, 1, 3, 3, 3, 3, 3);
    }
  }

}
