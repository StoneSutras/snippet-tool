<?xml version="1.0" encoding="UTF-8"?>
<!-- Stand 2008-04-04 -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:tei="http://www.tei-c.org/ns/1.0"
                xmlns="http://www.w3.org/1999/xhtml" version="2.0">
    <xsl:preserve-space elements="*"/>
    <xsl:output indent="yes"/>
    <xsl:variable name="interpunktion">。，、：；？！.,:;?!
        &#xD;「」
    </xsl:variable>
    <xsl:param name="id"/>
    <xsl:template match="tei:TEI">
        <div class="layout-text" lang="zh">
            <xsl:apply-templates select="tei:text/tei:body/tei:div[@xml:lang = 'zh']"/>
        </div>
    </xsl:template>
    <!-- Templates fuer die Layout-Darstellung -->
    <xsl:template match="tei:note"/>
    <!-- AB     //TODO:     ask Wolfgang about iteration possibility-->
    <xsl:template match="tei:space">
        <xsl:if test="@n &gt; 0">
            <span class="honorific">Ⓗ</span>
        </xsl:if>
        <xsl:if test="@n &gt; 1">
            <span class="honorific">Ⓗ</span>
        </xsl:if>
        <xsl:if test="@n &gt; 2">
            <span class="honorific">Ⓗ</span>
        </xsl:if>
        <xsl:if test="@n &gt; 3">
            <span class="honorific">Ⓗ</span>
        </xsl:if>
        <xsl:if test="@n &gt; 4">
            <span class="honorific">Ⓗ</span>
        </xsl:if>
        <xsl:if test="@n &gt; 5">
            <span class="honorific">Ⓗ</span>
        </xsl:if>
        <xsl:if test="@n &gt; 6">
            <span class="honorific">Ⓗ</span>
        </xsl:if>
        <xsl:if test="@n &gt; 7">
            <span class="honorific">Ⓗ</span>
        </xsl:if>
        <xsl:if test="@n &gt; 8">
            <span class="honorific">Ⓗ</span>
        </xsl:if>
        <xsl:if test="@n &gt; 9">
            <span class="honorific">Ⓗ</span>
        </xsl:if>
        <xsl:if test="@n &gt; 10">
            <span class="honorific">Ⓗ</span>
        </xsl:if>
    </xsl:template>
    <!-- AB -->
    <xsl:template match="tei:damage[@type='indiscernible']">
        <xsl:for-each select="string-to-codepoints(translate(.,$interpunktion,''))">
            <!--<span class="damage">Ⓓ</span>-->
            <span class="damage">⬜</span>
        </xsl:for-each>
    </xsl:template>
    <xsl:template match="tei:damage">
        <xsl:for-each select="string-to-codepoints(translate(.,$interpunktion,''))">
            <span class="damage">⬜</span>
        </xsl:for-each>
    </xsl:template>
    <!-- AB -->
    <xsl:template match="tei:choice">
        <choice>
            <xsl:for-each select="tei:unclear">
                <xsl:variable name="cert">
                    <xsl:value-of select="@cert"/>
                </xsl:variable>
                <variant cert="{$cert}">
                    <xsl:apply-templates/>
                </variant>
            </xsl:for-each>
        </choice>
    </xsl:template>
    <!-- AB -->
    <xsl:template match="tei:app">
        <choice>
            <xsl:for-each select="tei:lem">
                <variant cert="1.0">
                    <xsl:apply-templates/>
                </variant>
            </xsl:for-each>
            <xsl:for-each select="tei:rdg">
                <variant cert="0.0">
                    <xsl:apply-templates/>
                </variant>
            </xsl:for-each>
        </choice>
    </xsl:template>
    <xsl:template match="tei:g">
        <xsl:variable name="norm">
            <xsl:value-of select="substring(@ref,2,string-length(@ref))"/>
        </xsl:variable>
        <xsl:variable name="orig">
            <xsl:value-of select="//tei:glyph[@xml:id=$norm]/tei:mapping[@type='original']"/>
        </xsl:variable>
        <xsl:for-each select="string-to-codepoints(translate(.,$interpunktion,''))">
            <span class="normalized" original="{$orig}">
                <xsl:value-of select="codepoints-to-string(.)"/>
            </span>
        </xsl:for-each>
    </xsl:template>
    <xsl:template match="tei:lb">
        <br/>
    </xsl:template>
    <xsl:template match="tei:persName//text()">
        <!--<xsl:variable name="class">
          <xsl:choose>
            <xsl:when test="ancestor::tei:persName/@type = 'Buddha'">persNameBuddha</xsl:when>
            <xsl:when test="ancestor::tei:persName/@type = ('monk', 'nun')">persNameMonk</xsl:when>
            <xsl:when test="ancestor::tei:persName/starts-with(@type, 'Bodhi')">persNameBodhisattva</xsl:when>
            <xsl:when test="ancestor::tei:persName/starts-with(@type, 'emp')">persNameEmperor</xsl:when>
            <xsl:when test="ancestor::tei:persName/starts-with(@type, 'disciple')">persNameDisciple</xsl:when>
          </xsl:choose>
        </xsl:variable>-->
        <xsl:for-each select="string-to-codepoints(translate(.,$interpunktion,''))">
            <span class="persName">
                <xsl:value-of select="codepoints-to-string(.)"/>
            </span>
        </xsl:for-each>
    </xsl:template>
    <xsl:template match="tei:placeName">
        <xsl:for-each select="string-to-codepoints(translate(.,$interpunktion,''))">
            <span class="placeName">
                <xsl:value-of select="codepoints-to-string(.)"/>
            </span>
        </xsl:for-each>
    </xsl:template>
    <xsl:template match="tei:unclear">
        <xsl:for-each select="string-to-codepoints(translate(.,$interpunktion,''))">
            <span class="unclear">
                <xsl:value-of select="codepoints-to-string(.)"/>
            </span>
        </xsl:for-each>
    </xsl:template>
    <xsl:template match="tei:supplied">
        <supplied>
            <xsl:attribute name="rend">
                <xsl:value-of select="@rend"/>
            </xsl:attribute>
            <xsl:apply-templates/>
        </supplied>
    </xsl:template>
    <xsl:template match="element()">
        <xsl:apply-templates/>
    </xsl:template>
    <xsl:template match="text()">
        <xsl:variable name="text" select="string-to-codepoints(translate(.,$interpunktion,''))"/>
        <xsl:for-each select="$text">
            <span class="cell">
                <xsl:value-of select="codepoints-to-string(.)"/>
            </span>
        </xsl:for-each>
    </xsl:template>
</xsl:stylesheet>

